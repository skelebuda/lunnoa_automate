name: Publish NPM Packages

on:
  release:
    types: [published]

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.8.1'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@lunnoa-automate'

      - name: Get branch name
        id: vars
        run: echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: sanitize branch name
        run: echo "TAG=${BRANCH_NAME//\//-}" >> $GITHUB_ENV

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Configure .npmrc
        run: |
          echo "@lunnoa-automate:registry=https://npm.pkg.github.com" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> .npmrc

      - name: Build toolkit
        run: pnpm nx build toolkit

      - name: List toolkit build output
        run: ls -l packages/toolkit/dist || ls -l packages/toolkit/build || ls -l packages/toolkit

      - name: Build apps
        run: pnpm nx build apps

      - name: List apps build output
        run: ls -l packages/apps/dist || ls -l packages/apps/build || ls -l packages/apps

      - name: Publish toolkit
        run: pnpm nx run toolkit:nx-release-publish --verbose --tag $TAG
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ env.TAG }}

      - name: Publish apps
        run: pnpm nx run apps:nx-release-publish --verbose --tag $TAG
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ env.TAG }}

      # Verify packages
      - name: Wait for GitHub Packages to be available
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Waiting for GitHub Packages to be available..."
          timeout=300
          interval=10

          check_package() {
            pkg=$1
            while true; do
              result=$(curl -s -H "Authorization: Bearer $NODE_AUTH_TOKEN" \
                "https://npm.pkg.github.com/@lunnoa-automate/$pkg")
              if echo "$result" | grep -q "\"version\""; then
                echo "$pkg@$VERSION is available!"
                break
              fi
              if [ $timeout -le 0 ]; then
                echo "Timeout waiting for $pkg@$VERSION"
                exit 1
              fi
              echo "$pkg@$VERSION not yet available, waiting..."
              sleep $interval
              timeout=$((timeout - interval))
            done
          }

          check_package "apps"
          check_package "toolkit"

          echo "Packages are available, workflow complete"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Dependencies and Install
        run: |
          pnpm up @lunnoa-automate/apps@latest @lunnoa-automate/toolkit@latest
          pnpm install --frozen-lockfile
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
