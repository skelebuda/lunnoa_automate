name: Build Docker Image & Deploy UI to ECS

on:
  workflow_run:
    workflows: ['Publish NPM Packages']
    types:
      - completed

env:
  UI_REGISTRY: ghcr.io
  UI_IMAGE_NAME: ${{ github.repository }}/ui

jobs:
  build-and-push:
    name: Build and Push Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Version
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Configure npm for private registry
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update Dependencies and Install
        run: |
            pnpm up @lunnoa-automate/apps@${{ env.VERSION }} @lunnoa-automate/toolkit@${{ env.VERSION }}
            pnpm install -g pnpm nx
            pnpm install --frozen-lockfile
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.UI_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build-image
        env:
          VERSION: ${{ github.ref_name }}
        run: |
          docker build \
            --build-arg NPM_TOKEN=${{ secrets.NPM_TOKEN }} \
            -t ${{ env.UI_REGISTRY }}/${{ env.UI_IMAGE_NAME }}:$VERSION \
            -f packages/ui/Dockerfile .
          docker tag ${{ env.UI_REGISTRY }}/${{ env.UI_IMAGE_NAME }}:$VERSION ${{ env.UI_REGISTRY }}/${{ env.UI_IMAGE_NAME }}:latest
          docker push ${{ env.UI_REGISTRY }}/${{ env.UI_IMAGE_NAME }}:$VERSION
          docker push ${{ env.UI_REGISTRY }}/${{ env.UI_IMAGE_NAME }}:latest

  deploy-to-ecs:
    name: Deploy UI to ECS
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Render UI task definition
        id: render-task
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/ui-task-definition.json
          container-name: ${{ secrets.UI_CONTAINER_NAME }}
          image: ghcr.io/${{ github.repository }}/ui:${{ github.ref_name }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE_UI }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true
