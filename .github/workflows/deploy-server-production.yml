name: Build Docker Image & Deploy to ECS

on:
  workflow_run:
    workflows: ['Publish NPM Packages']
    types:
      - completed

env:
  SERVER_REGISTRY: ghcr.io
  SERVER_IMAGE_NAME: ${{ github.repository }}/server
  ECS_CLUSTER: lunnoa-automate-server-core
  ECS_SERVICE: lunnoa-automate-server-core-service
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: lunnoa-automate-server-core
  AWS_REGION: eu-central-1

jobs:
  build-and-push:
    name: Build and Push Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Version
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Configure npm for private registry
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update Dependencies and Install
        run: |
            pnpm up @lunnoa-automate/apps@${{ env.VERSION }} @lunnoa-automate/toolkit@${{ env.VERSION }}
            pnpm install --frozen-lockfile
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.SERVER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build-image
        env:
          VERSION: ${{ github.ref_name }}
        run: |
          docker build -t ${{ env.SERVER_REGISTRY }}/${{ github.repository }}/server:$VERSION -f packages/server/Dockerfile .
          docker tag ${{ env.SERVER_REGISTRY }}/${{ github.repository }}/server:$VERSION ${{ env.SERVER_REGISTRY }}/${{ github.repository }}/server:latest
          docker push ${{ env.SERVER_REGISTRY }}/${{ github.repository }}/server:$VERSION
          docker push ${{ env.SERVER_REGISTRY }}/${{ github.repository }}/server:latest

          echo "image=${{ env.SERVER_REGISTRY }}/${{ github.repository }}/server:$VERSION" >> $GITHUB_OUTPUT

  deploy-to-ecs:
    name: Deploy to ECS
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Replace placeholders in task definition
        run: |
          sed -i 's|{{ DATABASE_URL_ARN }}|'"${{ secrets.DATABASE_URL_ARN }}"'|g' ${{ env.ECS_TASK_DEFINITION }}
          sed -i 's|{{ PARAM_STORE_ACCESS_KEY_ARN }}|'"${{ secrets.PARAM_STORE_ACCESS_KEY_ARN }}"'|g' ${{ env.ECS_TASK_DEFINITION }}
          sed -i 's|{{ PARAM_STORE_SECRET_ACCESS_KEY_ARN }}|'"${{ secrets.PARAM_STORE_SECRET_ACCESS_KEY_ARN }}"'|g' ${{ env.ECS_TASK_DEFINITION }}
          sed -i 's|{{ PARAM_STORE_REGION_ARN }}|'"${{ secrets.PARAM_STORE_REGION_ARN }}"'|g' ${{ env.ECS_TASK_DEFINITION }}
          sed -i 's|{{ TASK_ROLE_ARN }}|'"${{ secrets.TASK_ROLE_ARN }}"'|g' ${{ env.ECS_TASK_DEFINITION }}
          sed -i 's|{{ EXECUTION_ROLE_ARN }}|'"${{ secrets.EXECUTION_ROLE_ARN }}"'|g' ${{ env.ECS_TASK_DEFINITION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ needs.build-and-push.outputs.image }}

      # Register the task definition first
      - name: Register task definition
        id: register-task-def
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://${{ steps.task-def.outputs.task-definition }} --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
          echo "Task definition registered: $TASK_DEF_ARN"

      - name: Check if ECS service exists
        id: check-service
        run: |
          if aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} | grep -q "MISSING"; then
            echo "SERVICE_EXISTS=false" >> $GITHUB_OUTPUT
          else
            echo "SERVICE_EXISTS=true" >> $GITHUB_OUTPUT
          fi

      - name: Create ECS service if it doesn't exist
        if: steps.check-service.outputs.SERVICE_EXISTS == 'false'
        run: |
          aws ecs create-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service-name ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.TASK_DEF_ARN }} \
            --desired-count 1 \
            --launch-type EC2 \
            --scheduling-strategy REPLICA \
            --deployment-configuration "maximumPercent=200,minimumHealthyPercent=100" \
            --deployment-controller "type=ECS"

      - name: Update ECS service if it exists
        if: steps.check-service.outputs.SERVICE_EXISTS == 'true'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
